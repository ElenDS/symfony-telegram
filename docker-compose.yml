version: "3.7"

networks:
  symf-network:
    name: symf-network
#    external: true
  symf-proxy.network:
    name: symf-proxy.network
#    external: true

services:
  symf-app:
    container_name: symf-app
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    depends_on:
      - symf-mysql
      - symf-redis
    env_file:
      - .env
    volumes:
      - ./:/app:cached
    extra_hosts:
      - "host.docker.internal:host-gateway" #for xDebug
    networks:
      - symf-network

  symf-app-nginx:
    container_name: symf-app-nginx
    build:
      context: ./docker/nginx
    depends_on:
      - symf-app
    volumes:
      - ./public:/app/public:cached
    networks:
      - symf-network
      - symf-proxy.network
    labels:
      - traefik.enable=true
      - traefik.http.routers.symf-nginx.rule=Host(`symf.localhost`)

  symf-redis:
    container_name: symf-redis
    build:
      context: ./docker/redis
    command: redis-server --appendonly yes
    hostname: "redis"
    volumes:
      - symf-redis-storage:/data
    networks:
      - symf-network
      - symf-proxy.network
    labels:
      - traefik.enable=true
      - traefik.tcp.services.symf-redis.loadBalancer.server.port=6379
      - traefik.tcp.routers.symf-redis.entrypoints=redis
      - traefik.tcp.routers.symf-redis.rule=HostSNI(`*`)
      - traefik.tcp.routers.symf-redis.service=symf-redis

  symf-mysql:
    container_name: symf-mysql
    build:
      context: ./docker/mysql
    volumes:
      - symf-mysql-storage:/var/lib/mysql
      - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
    networks:
      - symf-network
      - symf-proxy.network
    labels:
      - traefik.enable=true
      - traefik.tcp.services.symf-mysql.loadBalancer.server.port=3306
      - traefik.tcp.routers.symf-mysql.entrypoints=mysql
      - traefik.tcp.routers.symf-mysql.rule=HostSNI(`*`)
      - traefik.tcp.routers.symf-mysql.service=symf-mysql

  symf-rabbit:
    container_name: symf-rabbit
    build:
      context: ./docker/rmq
    volumes:
      - symf-rabbit-storage:/var/lib/rabbitmq
    networks:
      - symf-network
      - symf-proxy.network
    labels:
      - traefik.enable=true
      - traefik.tcp.services.symf-rabbit.loadBalancer.server.port=5672
      - traefik.tcp.routers.symf-rabbit.entrypoints=rabbit
      - traefik.tcp.routers.symf-rabbit.rule=HostSNI(`*`)
      - traefik.tcp.routers.symf-rabbit.service=symf-rabbit

  symf-proxy:
    container_name: symf-proxy
    image: traefik:v2.5
    command:
      - --providers.docker
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=symf-proxy.network
      - --providers.docker.useBindPortIP=false
      - --entrypoints.web.address=:80
      - --entrypoints.redis.address=:6379
      - --entrypoints.mysql.address=:3306
      - --entrypoints.rabbit.address=:5672
      - --api.dashboard=true
      - --api.insecure=true
    ports:
      - "80:80"
      - "6379:6379"
      - "3306:3306"
      - "5672:5672"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - symf-proxy.network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.rule=Host(`symf-proxy.localhost`)"
      - "traefik.http.routers.api.service=api@internal"

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  symf-redis-storage:
  symf-mysql-storage:
  symf-rabbit-storage:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
